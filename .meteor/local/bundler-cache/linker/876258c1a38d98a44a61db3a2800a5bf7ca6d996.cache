[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar SpacebarsCompiler = Package['spacebars-compiler'].SpacebarsCompiler;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar Random = Package.random.Random;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar Template, SSR;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/meteorhacks_ssr/lib/overrides.js                                                                    //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n// we don't need autorun to go through Tracker                                                                  // 1\nBlaze.View.prototype.autorun = function(f) {                                                                    // 2\n  var handler = {stop: function() {}};                                                                          // 3\n  f.call(this, handler);                                                                                        // 4\n  return handler;                                                                                               // 5\n};                                                                                                              // 6\n                                                                                                                // 7\nSpacebars.With = function (argFunc, contentFunc, elseFunc) {                                                    // 8\n  var argVar = new Blaze.ReactiveVar;                                                                           // 9\n  var view = Blaze.View('Spacebars_with', function () {                                                         // 10\n    return Blaze.If(function () { return argVar.get(); },                                                       // 11\n                    function () { return Blaze.With(function () {                                               // 12\n                      return argVar.get(); }, contentFunc); },                                                  // 13\n                    elseFunc);                                                                                  // 14\n  });                                                                                                           // 15\n                                                                                                                // 16\n  view.onViewCreated(function () {                                                                              // 17\n    this.autorun(function () {                                                                                  // 18\n      argVar.set(argFunc());                                                                                    // 19\n    });                                                                                                         // 20\n  });                                                                                                           // 21\n                                                                                                                // 22\n  return view;                                                                                                  // 23\n};                                                                                                              // 24\n                                                                                                                // 25\n// if we get a cursor from a templateHelper                                                                     // 26\n// we need fetch the data                                                                                       // 27\n// observering us useless and throw errors                                                                      // 28\nvar originalLookup = Blaze.View.prototype.lookup;                                                               // 29\nBlaze.View.prototype.lookup = function(key) {                                                                   // 30\n  var helper = originalLookup.apply(this, arguments);                                                           // 31\n  return wrapHelper(helper);                                                                                    // 32\n};                                                                                                              // 33\n                                                                                                                // 34\nfunction wrapHelper(helper) {                                                                                   // 35\n  if(typeof helper != 'function') {                                                                             // 36\n    return helper;                                                                                              // 37\n  }                                                                                                             // 38\n                                                                                                                // 39\n  return function() {                                                                                           // 40\n    var res = helper.apply(this, arguments);                                                                    // 41\n    if(res && typeof res.observeChanges == 'function') {                                                        // 42\n      return res.fetch();                                                                                       // 43\n    } else {                                                                                                    // 44\n      return res;                                                                                               // 45\n    }                                                                                                           // 46\n  }                                                                                                             // 47\n}                                                                                                               // 48\n                                                                                                                // 49\nvar originalTemplateWith = Blaze._TemplateWith;                                                                 // 50\nBlaze._TemplateWith = function(arg, contentFunc) {                                                              // 51\n  // data is available instantly and if we delayed                                                              // 52\n  // things won't work as expected                                                                              // 53\n                                                                                                                // 54\n  if(typeof arg == 'function') {                                                                                // 55\n    arg = arg();                                                                                                // 56\n  }                                                                                                             // 57\n  return originalTemplateWith.call(this, arg, contentFunc);                                                     // 58\n};                                                                                                              // 59\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/meteorhacks_ssr/lib/template.js                                                                     //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n// Packages and apps add templates on to this object.                                                           // 1\nTemplate = Blaze.Template;                                                                                      // 2\n                                                                                                                // 3\n// Check for duplicate template names and illegal names that won't work.                                        // 4\nTemplate.__checkName = function (name) {                                                                        // 5\n  if (name in Template) {                                                                                       // 6\n    if ((Template[name] instanceof Template) && name !== \"body\")                                                // 7\n      throw new Error(\"There are multiple templates named '\" + name + \"'. Each template needs a unique name.\");\n    throw new Error(\"This template name is reserved: \" + name);                                                 // 9\n  }                                                                                                             // 10\n};                                                                                                              // 11\n                                                                                                                // 12\n// Define a template `Template.body` that renders its                                                           // 13\n// `contentViews`.  `<body>` tags (of which there may be                                                        // 14\n// multiple) will have their contents added to it.                                                              // 15\nTemplate.body = new Template('body', function () {                                                              // 16\n  var parts = Template.body.contentViews;                                                                       // 17\n  // enable lookup by setting `view.template`                                                                   // 18\n  for (var i = 0; i < parts.length; i++)                                                                        // 19\n    parts[i].template = Template.body;                                                                          // 20\n  return parts;                                                                                                 // 21\n});                                                                                                             // 22\nTemplate.body.contentViews = []; // array of Blaze.Views                                                        // 23\nTemplate.body.view = null;                                                                                      // 24\n                                                                                                                // 25\nTemplate.body.addContent = function (renderFunc) {                                                              // 26\n  var kind = 'body_content_' + Template.body.contentViews.length;                                               // 27\n                                                                                                                // 28\n  Template.body.contentViews.push(Blaze.View(kind, renderFunc));                                                // 29\n};                                                                                                              // 30\n                                                                                                                // 31\n// This function does not use `this` and so it may be called                                                    // 32\n// as `Meteor.startup(Template.body.renderIntoDocument)`.                                                       // 33\nTemplate.body.renderToDocument = function () {                                                                  // 34\n                                                                                                                // 35\n};                                                                                                              // 36\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/meteorhacks_ssr/lib/dynamic.js                                                                      //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nTemplate.__dynamic = new Template(\"Template.__dynamic\", function() {                                            // 1\n  var view = this;                                                                                              // 2\n  var template = Spacebars.call(view.lookup(\"template\"));                                                       // 3\n  if(!template) {                                                                                               // 4\n    throw new Error('you must specify template argument in UI.dynamic');                                        // 5\n  } else if(!Template[template]) {                                                                              // 6\n    throw new Error('there is no template defined to include with UI.dynamic: '  + template);                   // 7\n  }                                                                                                             // 8\n                                                                                                                // 9\n  var data = Spacebars.call(view.lookup(\"data\"));                                                               // 10\n  if(!data) {                                                                                                   // 11\n    // get data from the parent                                                                                 // 12\n    data = Spacebars.call(view.lookup)                                                                          // 13\n  }                                                                                                             // 14\n                                                                                                                // 15\n  return Blaze._TemplateWith(data, function() {                                                                 // 16\n    return Spacebars.include(Template[template]);                                                               // 17\n  });                                                                                                           // 18\n});                                                                                                             // 19\n                                                                                                                // 20\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/meteorhacks_ssr/lib/api.js                                                                          //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nvar format = Npm.require('util').format;                                                                        // 1\nvar Compilers = {};                                                                                             // 2\nCompilers.html = SpacebarsCompiler;                                                                             // 3\nif(Package['mquandalle:jade-compiler']) {                                                                       // 4\n  Compilers.jade = Package['mquandalle:jade-compiler'].JadeCompiler;                                            // 5\n}                                                                                                               // 6\n                                                                                                                // 7\nSSR = {};                                                                                                       // 8\n                                                                                                                // 9\nSSR.render = function(templateName, data) {                                                                     // 10\n  var renderFunc = (data)? Blaze.toHTMLWithData : Blaze.toHTML;                                                 // 11\n  var template = (typeof templateName == 'string')?                                                             // 12\n    Template[templateName] : templateName;                                                                      // 13\n                                                                                                                // 14\n  return renderFunc(template, data);                                                                            // 15\n};                                                                                                              // 16\n                                                                                                                // 17\nSSR.compileTemplate = function(name, content, options) {                                                        // 18\n  var language = options && options.language || \"html\";                                                         // 19\n  var compiler = Compilers[language];                                                                           // 20\n  if(!compiler) {                                                                                               // 21\n    throw Error(\"Unknown language: \" + language);                                                               // 22\n  }                                                                                                             // 23\n                                                                                                                // 24\n  var compiled = compiler.compile(content);                                                                     // 25\n  var templateFmt = \"new Template('%s', function() {var view=this; return %s()})\";                              // 26\n  var template = format(templateFmt, name, compiled);                                                           // 27\n                                                                                                                // 28\n  return Template[name] = eval(template);                                                                       // 29\n};                                                                                                              // 30\n                                                                                                                // 31\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['meteorhacks:ssr'] = {\n  Template: Template,\n  SSR: SSR\n};\n\n})();\n","servePath":"/packages/meteorhacks_ssr.js","sourceMap":{"version":3,"sources":["/packages/meteorhacks_ssr/lib/overrides.js","/packages/meteorhacks_ssr/lib/template.js","/packages/meteorhacks_ssr/lib/dynamic.js","/packages/meteorhacks_ssr/lib/api.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qH;;;;;;;;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qH;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qH;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qH","file":"/packages/meteorhacks_ssr.js","sourcesContent":["// we don't need autorun to go through Tracker\nBlaze.View.prototype.autorun = function(f) {\n  var handler = {stop: function() {}};\n  f.call(this, handler);\n  return handler;\n};\n\nSpacebars.With = function (argFunc, contentFunc, elseFunc) {\n  var argVar = new Blaze.ReactiveVar;\n  var view = Blaze.View('Spacebars_with', function () {\n    return Blaze.If(function () { return argVar.get(); },\n                    function () { return Blaze.With(function () {\n                      return argVar.get(); }, contentFunc); },\n                    elseFunc);\n  });\n\n  view.onViewCreated(function () {\n    this.autorun(function () {\n      argVar.set(argFunc());\n    });\n  });\n\n  return view;\n};\n\n// if we get a cursor from a templateHelper\n// we need fetch the data\n// observering us useless and throw errors\nvar originalLookup = Blaze.View.prototype.lookup;\nBlaze.View.prototype.lookup = function(key) {\n  var helper = originalLookup.apply(this, arguments);\n  return wrapHelper(helper);\n};\n\nfunction wrapHelper(helper) {\n  if(typeof helper != 'function') {\n    return helper;\n  }\n\n  return function() {\n    var res = helper.apply(this, arguments);\n    if(res && typeof res.observeChanges == 'function') {\n      return res.fetch();\n    } else {\n      return res;\n    }\n  }\n}\n\nvar originalTemplateWith = Blaze._TemplateWith;\nBlaze._TemplateWith = function(arg, contentFunc) {\n  // data is available instantly and if we delayed\n  // things won't work as expected\n\n  if(typeof arg == 'function') {\n    arg = arg();\n  }\n  return originalTemplateWith.call(this, arg, contentFunc);\n};","// Packages and apps add templates on to this object.\nTemplate = Blaze.Template;\n\n// Check for duplicate template names and illegal names that won't work.\nTemplate.__checkName = function (name) {\n  if (name in Template) {\n    if ((Template[name] instanceof Template) && name !== \"body\")\n      throw new Error(\"There are multiple templates named '\" + name + \"'. Each template needs a unique name.\");\n    throw new Error(\"This template name is reserved: \" + name);\n  }\n};\n\n// Define a template `Template.body` that renders its\n// `contentViews`.  `<body>` tags (of which there may be\n// multiple) will have their contents added to it.\nTemplate.body = new Template('body', function () {\n  var parts = Template.body.contentViews;\n  // enable lookup by setting `view.template`\n  for (var i = 0; i < parts.length; i++)\n    parts[i].template = Template.body;\n  return parts;\n});\nTemplate.body.contentViews = []; // array of Blaze.Views\nTemplate.body.view = null;\n\nTemplate.body.addContent = function (renderFunc) {\n  var kind = 'body_content_' + Template.body.contentViews.length;\n\n  Template.body.contentViews.push(Blaze.View(kind, renderFunc));\n};\n\n// This function does not use `this` and so it may be called\n// as `Meteor.startup(Template.body.renderIntoDocument)`.\nTemplate.body.renderToDocument = function () {\n\n};","Template.__dynamic = new Template(\"Template.__dynamic\", function() {\n  var view = this;\n  var template = Spacebars.call(view.lookup(\"template\"));\n  if(!template) {\n    throw new Error('you must specify template argument in UI.dynamic');\n  } else if(!Template[template]) {\n    throw new Error('there is no template defined to include with UI.dynamic: '  + template);\n  }\n\n  var data = Spacebars.call(view.lookup(\"data\"));\n  if(!data) {\n    // get data from the parent\n    data = Spacebars.call(view.lookup)\n  }\n\n  return Blaze._TemplateWith(data, function() {\n    return Spacebars.include(Template[template]);\n  });\n});\n","var format = Npm.require('util').format;\nvar Compilers = {};\nCompilers.html = SpacebarsCompiler;\nif(Package['mquandalle:jade-compiler']) {\n  Compilers.jade = Package['mquandalle:jade-compiler'].JadeCompiler;\n}\n\nSSR = {};\n\nSSR.render = function(templateName, data) {\n  var renderFunc = (data)? Blaze.toHTMLWithData : Blaze.toHTML;\n  var template = (typeof templateName == 'string')?\n    Template[templateName] : templateName;\n\n  return renderFunc(template, data);\n};\n\nSSR.compileTemplate = function(name, content, options) {\n  var language = options && options.language || \"html\";\n  var compiler = Compilers[language];\n  if(!compiler) {\n    throw Error(\"Unknown language: \" + language);\n  }\n\n  var compiled = compiler.compile(content);\n  var templateFmt = \"new Template('%s', function() {var view=this; return %s()})\";\n  var template = format(templateFmt, name, compiled);\n\n  return Template[name] = eval(template);\n};\n"]}}]