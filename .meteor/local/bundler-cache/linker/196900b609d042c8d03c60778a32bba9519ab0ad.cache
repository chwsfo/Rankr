[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nvar MongoObject = Package['aldeed:simple-schema'].MongoObject;\nvar _ = Package.underscore._;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar EJSON = Package.ejson.EJSON;\nvar EventEmitter = Package['raix:eventemitter'].EventEmitter;\n\n/* Package-scope variables */\nvar Collection2, Mongo;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/aldeed_collection2-core/lib/collection2.js                                                               //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n// Exported only for listening to events                                                                             // 1\nCollection2 = new EventEmitter();                                                                                    // 2\n                                                                                                                     // 3\n// backwards compatibility                                                                                           // 4\nif (typeof Mongo === \"undefined\") {                                                                                  // 5\n  Mongo = {};                                                                                                        // 6\n  Mongo.Collection = Meteor.Collection;                                                                              // 7\n}                                                                                                                    // 8\n                                                                                                                     // 9\n/**                                                                                                                  // 10\n * Mongo.Collection.prototype.attachSchema                                                                           // 11\n * @param {SimpleSchema|Object} ss - SimpleSchema instance or a schema definition object                             // 12\n *    from which to create a new SimpleSchema instance                                                               // 13\n * @param {Object} [options]                                                                                         // 14\n * @param {Boolean} [options.transform=false] Set to `true` if your document must be passed                          // 15\n *    through the collection's transform to properly validate.                                                       // 16\n * @param {Boolean} [options.replace=false] Set to `true` to replace any existing schema instead of combining        // 17\n * @return {undefined}                                                                                               // 18\n *                                                                                                                   // 19\n * Use this method to attach a schema to a collection created by another package,                                    // 20\n * such as Meteor.users. It is most likely unsafe to call this method more than                                      // 21\n * once for a single collection, or to call this for a collection that had a                                         // 22\n * schema object passed to its constructor.                                                                          // 23\n */                                                                                                                  // 24\nMongo.Collection.prototype.attachSchema = function c2AttachSchema(ss, options) {                                     // 25\n  var self = this;                                                                                                   // 26\n  options = options || {};                                                                                           // 27\n                                                                                                                     // 28\n  // Allow passing just the schema object                                                                            // 29\n  if (!(ss instanceof SimpleSchema)) {                                                                               // 30\n    ss = new SimpleSchema(ss);                                                                                       // 31\n  }                                                                                                                  // 32\n                                                                                                                     // 33\n  self._c2 = self._c2 || {};                                                                                         // 34\n                                                                                                                     // 35\n  // If we've already attached one schema, we combine both into a new schema unless options.replace is `true`        // 36\n  if (self._c2._simpleSchema && options.replace !== true) {                                                          // 37\n    ss = new SimpleSchema([self._c2._simpleSchema, ss]);                                                             // 38\n  }                                                                                                                  // 39\n                                                                                                                     // 40\n  // Track the schema in the collection                                                                              // 41\n  self._c2._simpleSchema = ss;                                                                                       // 42\n                                                                                                                     // 43\n  // Attach the schema to the underlying LocalCollection, too                                                        // 44\n  if (self._collection instanceof LocalCollection) {                                                                 // 45\n    self._collection._c2 = self._collection._c2 || {};                                                               // 46\n    self._collection._c2._simpleSchema = ss;                                                                         // 47\n  }                                                                                                                  // 48\n                                                                                                                     // 49\n  defineDeny(self, options);                                                                                         // 50\n  keepInsecure(self);                                                                                                // 51\n                                                                                                                     // 52\n  Collection2.emit('schema.attached', self, ss, options);                                                            // 53\n};                                                                                                                   // 54\n                                                                                                                     // 55\n_.each([Mongo.Collection, LocalCollection], function (obj) {                                                         // 56\n  obj.prototype.simpleSchema = function () {                                                                         // 57\n    var self = this;                                                                                                 // 58\n    return self._c2 ? self._c2._simpleSchema : null;                                                                 // 59\n  };                                                                                                                 // 60\n});                                                                                                                  // 61\n                                                                                                                     // 62\n// Wrap DB write operation methods                                                                                   // 63\n_.each(['insert', 'update'], function(methodName) {                                                                  // 64\n  var _super = Mongo.Collection.prototype[methodName];                                                               // 65\n  Mongo.Collection.prototype[methodName] = function() {                                                              // 66\n    var self = this, options,                                                                                        // 67\n        args = _.toArray(arguments);                                                                                 // 68\n                                                                                                                     // 69\n    options = (methodName === \"insert\") ? args[1] : args[2];                                                         // 70\n                                                                                                                     // 71\n    // Support missing options arg                                                                                   // 72\n    if (!options || typeof options === \"function\") {                                                                 // 73\n      options = {};                                                                                                  // 74\n    }                                                                                                                // 75\n                                                                                                                     // 76\n    if (self._c2 && options.bypassCollection2 !== true) {                                                            // 77\n      var userId = null;                                                                                             // 78\n      try { // https://github.com/aldeed/meteor-collection2/issues/175                                               // 79\n        userId = Meteor.userId();                                                                                    // 80\n      } catch (err) {}                                                                                               // 81\n                                                                                                                     // 82\n      args = doValidate.call(                                                                                        // 83\n        self,                                                                                                        // 84\n        methodName,                                                                                                  // 85\n        args,                                                                                                        // 86\n        true, // getAutoValues                                                                                       // 87\n        userId,                                                                                                      // 88\n        Meteor.isServer // isFromTrustedCode                                                                         // 89\n      );                                                                                                             // 90\n      if (!args) {                                                                                                   // 91\n        // doValidate already called the callback or threw the error so we're done.                                  // 92\n        // But insert should always return an ID to match core behavior.                                             // 93\n        return methodName === \"insert\" ? self._makeNewID() : undefined;                                              // 94\n      }                                                                                                              // 95\n    } else {                                                                                                         // 96\n      // We still need to adjust args because insert does not take options                                           // 97\n      if (methodName === \"insert\" && typeof args[1] !== 'function') args.splice(1, 1);                               // 98\n    }                                                                                                                // 99\n                                                                                                                     // 100\n    return _super.apply(self, args);                                                                                 // 101\n  };                                                                                                                 // 102\n});                                                                                                                  // 103\n                                                                                                                     // 104\n/*                                                                                                                   // 105\n * Private                                                                                                           // 106\n */                                                                                                                  // 107\n                                                                                                                     // 108\nfunction doValidate(type, args, getAutoValues, userId, isFromTrustedCode) {                                          // 109\n  var self = this, doc, callback, error, options, isUpsert, selector, last, hasCallback;                             // 110\n                                                                                                                     // 111\n  var schema = self.simpleSchema();                                                                                  // 112\n  var isLocalCollection = (self._connection === null);                                                               // 113\n                                                                                                                     // 114\n  if (!args.length) {                                                                                                // 115\n    throw new Error(type + \" requires an argument\");                                                                 // 116\n  }                                                                                                                  // 117\n                                                                                                                     // 118\n  // Gather arguments and cache the selector                                                                         // 119\n  if (type === \"insert\") {                                                                                           // 120\n    doc = args[0];                                                                                                   // 121\n    options = args[1];                                                                                               // 122\n    callback = args[2];                                                                                              // 123\n                                                                                                                     // 124\n    // The real insert doesn't take options                                                                          // 125\n    if (typeof options === \"function\") {                                                                             // 126\n      args = [doc, options];                                                                                         // 127\n    } else if (typeof callback === \"function\") {                                                                     // 128\n      args = [doc, callback];                                                                                        // 129\n    } else {                                                                                                         // 130\n      args = [doc];                                                                                                  // 131\n    }                                                                                                                // 132\n  } else if (type === \"update\") {                                                                                    // 133\n    selector = args[0];                                                                                              // 134\n    doc = args[1];                                                                                                   // 135\n    options = args[2];                                                                                               // 136\n    callback = args[3];                                                                                              // 137\n  } else {                                                                                                           // 138\n    throw new Error(\"invalid type argument\");                                                                        // 139\n  }                                                                                                                  // 140\n                                                                                                                     // 141\n  var validatedObjectWasInitiallyEmpty = _.isEmpty(doc);                                                             // 142\n                                                                                                                     // 143\n  // Support missing options arg                                                                                     // 144\n  if (!callback && typeof options === \"function\") {                                                                  // 145\n    callback = options;                                                                                              // 146\n    options = {};                                                                                                    // 147\n  }                                                                                                                  // 148\n  options = options || {};                                                                                           // 149\n                                                                                                                     // 150\n  last = args.length - 1;                                                                                            // 151\n                                                                                                                     // 152\n  hasCallback = (typeof args[last] === 'function');                                                                  // 153\n                                                                                                                     // 154\n  // If update was called with upsert:true, flag as an upsert                                                        // 155\n  isUpsert = (type === \"update\" && options.upsert === true);                                                         // 156\n                                                                                                                     // 157\n  // On the server and for local collections, we allow passing `getAutoValues: false` to disable autoValue functions\n  if ((Meteor.isServer || isLocalCollection) && options.getAutoValues === false) {                                   // 159\n    getAutoValues = false;                                                                                           // 160\n  }                                                                                                                  // 161\n                                                                                                                     // 162\n  // Determine validation context                                                                                    // 163\n  var validationContext = options.validationContext;                                                                 // 164\n  if (validationContext) {                                                                                           // 165\n    if (typeof validationContext === 'string') {                                                                     // 166\n      validationContext = schema.namedContext(validationContext);                                                    // 167\n    }                                                                                                                // 168\n  } else {                                                                                                           // 169\n    validationContext = schema.namedContext();                                                                       // 170\n  }                                                                                                                  // 171\n                                                                                                                     // 172\n  // Add a default callback function if we're on the client and no callback was given                                // 173\n  if (Meteor.isClient && !callback) {                                                                                // 174\n    // Client can't block, so it can't report errors by exception,                                                   // 175\n    // only by callback. If they forget the callback, give them a                                                    // 176\n    // default one that logs the error, so they aren't totally                                                       // 177\n    // baffled if their writes don't work because their database is                                                  // 178\n    // down.                                                                                                         // 179\n    callback = function(err) {                                                                                       // 180\n      if (err) {                                                                                                     // 181\n        Meteor._debug(type + \" failed: \" + (err.reason || err.stack));                                               // 182\n      }                                                                                                              // 183\n    };                                                                                                               // 184\n  }                                                                                                                  // 185\n                                                                                                                     // 186\n  // If client validation is fine or is skipped but then something                                                   // 187\n  // is found to be invalid on the server, we get that error back                                                    // 188\n  // as a special Meteor.Error that we need to parse.                                                                // 189\n  if (Meteor.isClient && hasCallback) {                                                                              // 190\n    callback = args[last] = wrapCallbackForParsingServerErrors(validationContext, callback);                         // 191\n  }                                                                                                                  // 192\n                                                                                                                     // 193\n  var schemaAllowsId = schema.allowsKey(\"_id\");                                                                      // 194\n  if (type === \"insert\" && !doc._id && schemaAllowsId) {                                                             // 195\n    doc._id = self._makeNewID();                                                                                     // 196\n  }                                                                                                                  // 197\n                                                                                                                     // 198\n  // Get the docId for passing in the autoValue/custom context                                                       // 199\n  var docId;                                                                                                         // 200\n  if (type === 'insert') {                                                                                           // 201\n    docId = doc._id; // might be undefined                                                                           // 202\n  } else if (type === \"update\" && selector) {                                                                        // 203\n    docId = typeof selector === 'string' || selector instanceof Mongo.ObjectID ? selector : selector._id;            // 204\n  }                                                                                                                  // 205\n                                                                                                                     // 206\n  // If _id has already been added, remove it temporarily if it's                                                    // 207\n  // not explicitly defined in the schema.                                                                           // 208\n  var cachedId;                                                                                                      // 209\n  if (doc._id && !schemaAllowsId) {                                                                                  // 210\n    cachedId = doc._id;                                                                                              // 211\n    delete doc._id;                                                                                                  // 212\n  }                                                                                                                  // 213\n                                                                                                                     // 214\n  function doClean(docToClean, getAutoValues, filter, autoConvert, removeEmptyStrings, trimStrings) {                // 215\n    // Clean the doc/modifier in place                                                                               // 216\n    schema.clean(docToClean, {                                                                                       // 217\n      filter: filter,                                                                                                // 218\n      autoConvert: autoConvert,                                                                                      // 219\n      getAutoValues: getAutoValues,                                                                                  // 220\n      isModifier: (type !== \"insert\"),                                                                               // 221\n      removeEmptyStrings: removeEmptyStrings,                                                                        // 222\n      trimStrings: trimStrings,                                                                                      // 223\n      extendAutoValueContext: _.extend({                                                                             // 224\n        isInsert: (type === \"insert\"),                                                                               // 225\n        isUpdate: (type === \"update\" && options.upsert !== true),                                                    // 226\n        isUpsert: isUpsert,                                                                                          // 227\n        userId: userId,                                                                                              // 228\n        isFromTrustedCode: isFromTrustedCode,                                                                        // 229\n        docId: docId,                                                                                                // 230\n        isLocalCollection: isLocalCollection                                                                         // 231\n      }, options.extendAutoValueContext || {})                                                                       // 232\n    });                                                                                                              // 233\n  }                                                                                                                  // 234\n                                                                                                                     // 235\n  // Preliminary cleaning on both client and server. On the server and for local                                     // 236\n  // collections, automatic values will also be set at this point.                                                   // 237\n  doClean(                                                                                                           // 238\n    doc,                                                                                                             // 239\n    getAutoValues,                                                                                                   // 240\n    options.filter !== false,                                                                                        // 241\n    options.autoConvert !== false,                                                                                   // 242\n    options.removeEmptyStrings !== false,                                                                            // 243\n    options.trimStrings !== false                                                                                    // 244\n  );                                                                                                                 // 245\n                                                                                                                     // 246\n  // We clone before validating because in some cases we need to adjust the                                          // 247\n  // object a bit before validating it. If we adjusted `doc` itself, our                                             // 248\n  // changes would persist into the database.                                                                        // 249\n  var docToValidate = {};                                                                                            // 250\n  for (var prop in doc) {                                                                                            // 251\n    // We omit prototype properties when cloning because they will not be valid                                      // 252\n    // and mongo omits them when saving to the database anyway.                                                      // 253\n    if (doc.hasOwnProperty(prop)) {                                                                                  // 254\n      docToValidate[prop] = doc[prop];                                                                               // 255\n    }                                                                                                                // 256\n  }                                                                                                                  // 257\n                                                                                                                     // 258\n  // On the server, upserts are possible; SimpleSchema handles upserts pretty                                        // 259\n  // well by default, but it will not know about the fields in the selector,                                         // 260\n  // which are also stored in the database if an insert is performed. So we                                          // 261\n  // will allow these fields to be considered for validation by adding them                                          // 262\n  // to the $set in the modifier. This is no doubt prone to errors, but there                                        // 263\n  // probably isn't any better way right now.                                                                        // 264\n  if (Meteor.isServer && isUpsert && _.isObject(selector)) {                                                         // 265\n    var set = docToValidate.$set || {};                                                                              // 266\n    docToValidate.$set = _.clone(selector);                                                                          // 267\n    if (!schemaAllowsId) delete docToValidate.$set._id;                                                              // 268\n    _.extend(docToValidate.$set, set);                                                                               // 269\n  }                                                                                                                  // 270\n                                                                                                                     // 271\n  // Set automatic values for validation on the client.                                                              // 272\n  // On the server, we already updated doc with auto values, but on the client,                                      // 273\n  // we will add them to docToValidate for validation purposes only.                                                 // 274\n  // This is because we want all actual values generated on the server.                                              // 275\n  if (Meteor.isClient && !isLocalCollection) {                                                                       // 276\n    doClean(docToValidate, true, false, false, false, false);                                                        // 277\n  }                                                                                                                  // 278\n                                                                                                                     // 279\n  // XXX Maybe move this into SimpleSchema                                                                           // 280\n  if (!validatedObjectWasInitiallyEmpty && _.isEmpty(docToValidate)) {                                               // 281\n    throw new Error('After filtering out keys not in the schema, your ' +                                            // 282\n      (type === 'update' ? 'modifier' : 'object') +                                                                  // 283\n      ' is now empty');                                                                                              // 284\n  }                                                                                                                  // 285\n                                                                                                                     // 286\n  // Validate doc                                                                                                    // 287\n  var isValid;                                                                                                       // 288\n  if (options.validate === false) {                                                                                  // 289\n    isValid = true;                                                                                                  // 290\n  } else {                                                                                                           // 291\n    isValid = validationContext.validate(docToValidate, {                                                            // 292\n      modifier: (type === \"update\" || type === \"upsert\"),                                                            // 293\n      upsert: isUpsert,                                                                                              // 294\n      extendedCustomContext: _.extend({                                                                              // 295\n        isInsert: (type === \"insert\"),                                                                               // 296\n        isUpdate: (type === \"update\" && options.upsert !== true),                                                    // 297\n        isUpsert: isUpsert,                                                                                          // 298\n        userId: userId,                                                                                              // 299\n        isFromTrustedCode: isFromTrustedCode,                                                                        // 300\n        docId: docId,                                                                                                // 301\n        isLocalCollection: isLocalCollection                                                                         // 302\n      }, options.extendedCustomContext || {})                                                                        // 303\n    });                                                                                                              // 304\n  }                                                                                                                  // 305\n                                                                                                                     // 306\n  if (isValid) {                                                                                                     // 307\n    // Add the ID back                                                                                               // 308\n    if (cachedId) {                                                                                                  // 309\n      doc._id = cachedId;                                                                                            // 310\n    }                                                                                                                // 311\n                                                                                                                     // 312\n    // Update the args to reflect the cleaned doc                                                                    // 313\n    // XXX not sure this is necessary since we mutate                                                                // 314\n    if (type === \"insert\") {                                                                                         // 315\n      args[0] = doc;                                                                                                 // 316\n    } else {                                                                                                         // 317\n      args[1] = doc;                                                                                                 // 318\n    }                                                                                                                // 319\n                                                                                                                     // 320\n    // If callback, set invalidKey when we get a mongo unique error                                                  // 321\n    if (Meteor.isServer && hasCallback) {                                                                            // 322\n      args[last] = wrapCallbackForParsingMongoValidationErrors(validationContext, args[last]);                       // 323\n    }                                                                                                                // 324\n                                                                                                                     // 325\n    return args;                                                                                                     // 326\n  } else {                                                                                                           // 327\n    error = getErrorObject(validationContext);                                                                       // 328\n    if (callback) {                                                                                                  // 329\n      // insert/update/upsert pass `false` when there's an error, so we do that                                      // 330\n      callback(error, false);                                                                                        // 331\n    } else {                                                                                                         // 332\n      throw error;                                                                                                   // 333\n    }                                                                                                                // 334\n  }                                                                                                                  // 335\n}                                                                                                                    // 336\n                                                                                                                     // 337\nfunction getErrorObject(context) {                                                                                   // 338\n  var message, invalidKeys = context.invalidKeys();                                                                  // 339\n  if (invalidKeys.length) {                                                                                          // 340\n    message = context.keyErrorMessage(invalidKeys[0].name);                                                          // 341\n  } else {                                                                                                           // 342\n    message = \"Failed validation\";                                                                                   // 343\n  }                                                                                                                  // 344\n  var error = new Error(message);                                                                                    // 345\n  error.invalidKeys = invalidKeys;                                                                                   // 346\n  error.validationContext = context;                                                                                 // 347\n  // If on the server, we add a sanitized error, too, in case we're                                                  // 348\n  // called from a method.                                                                                           // 349\n  if (Meteor.isServer) {                                                                                             // 350\n    error.sanitizedError = new Meteor.Error(400, message, EJSON.stringify(error.invalidKeys));                       // 351\n  }                                                                                                                  // 352\n  return error;                                                                                                      // 353\n}                                                                                                                    // 354\n                                                                                                                     // 355\nfunction addUniqueError(context, errorMessage) {                                                                     // 356\n  var name = errorMessage.split('c2_')[1].split(' ')[0];                                                             // 357\n  var val = errorMessage.split('dup key:')[1].split('\"')[1];                                                         // 358\n  context.addInvalidKeys([{                                                                                          // 359\n    name: name,                                                                                                      // 360\n    type: 'notUnique',                                                                                               // 361\n    value: val                                                                                                       // 362\n  }]);                                                                                                               // 363\n}                                                                                                                    // 364\n                                                                                                                     // 365\nfunction wrapCallbackForParsingMongoValidationErrors(validationContext, cb) {                                        // 366\n  return function wrappedCallbackForParsingMongoValidationErrors(error) {                                            // 367\n    var args = _.toArray(arguments);                                                                                 // 368\n    if (error &&                                                                                                     // 369\n        ((error.name === \"MongoError\" && error.code === 11001) || error.message.indexOf('MongoError: E11000' !== -1)) &&\n        error.message.indexOf('c2_') !== -1) {                                                                       // 371\n      addUniqueError(validationContext, error.message);                                                              // 372\n      args[0] = getErrorObject(validationContext);                                                                   // 373\n    }                                                                                                                // 374\n    return cb.apply(this, args);                                                                                     // 375\n  };                                                                                                                 // 376\n}                                                                                                                    // 377\n                                                                                                                     // 378\nfunction wrapCallbackForParsingServerErrors(validationContext, cb) {                                                 // 379\n  return function wrappedCallbackForParsingServerErrors(error) {                                                     // 380\n    var args = _.toArray(arguments);                                                                                 // 381\n    // Handle our own validation errors                                                                              // 382\n    if (error instanceof Meteor.Error &&                                                                             // 383\n        error.error === 400 &&                                                                                       // 384\n        error.reason === \"INVALID\" &&                                                                                // 385\n        typeof error.details === \"string\") {                                                                         // 386\n      var invalidKeysFromServer = EJSON.parse(error.details);                                                        // 387\n      validationContext.addInvalidKeys(invalidKeysFromServer);                                                       // 388\n      args[0] = getErrorObject(validationContext);                                                                   // 389\n    }                                                                                                                // 390\n    // Handle Mongo unique index errors, which are forwarded to the client as 409 errors                             // 391\n    else if (error instanceof Meteor.Error &&                                                                        // 392\n             error.error === 409 &&                                                                                  // 393\n             error.reason &&                                                                                         // 394\n             error.reason.indexOf('E11000') !== -1 &&                                                                // 395\n             error.reason.indexOf('c2_') !== -1) {                                                                   // 396\n      addUniqueError(validationContext, error.reason);                                                               // 397\n      args[0] = getErrorObject(validationContext);                                                                   // 398\n    }                                                                                                                // 399\n    return cb.apply(this, args);                                                                                     // 400\n  };                                                                                                                 // 401\n}                                                                                                                    // 402\n                                                                                                                     // 403\nvar alreadyInsecured = {};                                                                                           // 404\nfunction keepInsecure(c) {                                                                                           // 405\n  // If insecure package is in use, we need to add allow rules that return                                           // 406\n  // true. Otherwise, it would seemingly turn off insecure mode.                                                     // 407\n  if (Package && Package.insecure && !alreadyInsecured[c._name]) {                                                   // 408\n    c.allow({                                                                                                        // 409\n      insert: function() {                                                                                           // 410\n        return true;                                                                                                 // 411\n      },                                                                                                             // 412\n      update: function() {                                                                                           // 413\n        return true;                                                                                                 // 414\n      },                                                                                                             // 415\n      remove: function () {                                                                                          // 416\n        return true;                                                                                                 // 417\n      },                                                                                                             // 418\n      fetch: [],                                                                                                     // 419\n      transform: null                                                                                                // 420\n    });                                                                                                              // 421\n    alreadyInsecured[c._name] = true;                                                                                // 422\n  }                                                                                                                  // 423\n  // If insecure package is NOT in use, then adding the two deny functions                                           // 424\n  // does not have any effect on the main app's security paradigm. The                                               // 425\n  // user will still be required to add at least one allow function of her                                           // 426\n  // own for each operation for this collection. And the user may still add                                          // 427\n  // additional deny functions, but does not have to.                                                                // 428\n}                                                                                                                    // 429\n                                                                                                                     // 430\nvar alreadyDefined = {};                                                                                             // 431\nfunction defineDeny(c, options) {                                                                                    // 432\n  if (!alreadyDefined[c._name]) {                                                                                    // 433\n                                                                                                                     // 434\n    var isLocalCollection = (c._connection === null);                                                                // 435\n                                                                                                                     // 436\n    // First define deny functions to extend doc with the results of clean                                           // 437\n    // and autovalues. This must be done with \"transform: null\" or we would be                                       // 438\n    // extending a clone of doc and therefore have no effect.                                                        // 439\n    c.deny({                                                                                                         // 440\n      insert: function(userId, doc) {                                                                                // 441\n        // Referenced doc is cleaned in place                                                                        // 442\n        c.simpleSchema().clean(doc, {                                                                                // 443\n          isModifier: false,                                                                                         // 444\n          // We don't do these here because they are done on the client if desired                                   // 445\n          filter: false,                                                                                             // 446\n          autoConvert: false,                                                                                        // 447\n          removeEmptyStrings: false,                                                                                 // 448\n          trimStrings: false,                                                                                        // 449\n          extendAutoValueContext: {                                                                                  // 450\n            isInsert: true,                                                                                          // 451\n            isUpdate: false,                                                                                         // 452\n            isUpsert: false,                                                                                         // 453\n            userId: userId,                                                                                          // 454\n            isFromTrustedCode: false,                                                                                // 455\n            docId: doc._id,                                                                                          // 456\n            isLocalCollection: isLocalCollection                                                                     // 457\n          }                                                                                                          // 458\n        });                                                                                                          // 459\n                                                                                                                     // 460\n        return false;                                                                                                // 461\n      },                                                                                                             // 462\n      update: function(userId, doc, fields, modifier) {                                                              // 463\n        // Referenced modifier is cleaned in place                                                                   // 464\n        c.simpleSchema().clean(modifier, {                                                                           // 465\n          isModifier: true,                                                                                          // 466\n          // We don't do these here because they are done on the client if desired                                   // 467\n          filter: false,                                                                                             // 468\n          autoConvert: false,                                                                                        // 469\n          removeEmptyStrings: false,                                                                                 // 470\n          trimStrings: false,                                                                                        // 471\n          extendAutoValueContext: {                                                                                  // 472\n            isInsert: false,                                                                                         // 473\n            isUpdate: true,                                                                                          // 474\n            isUpsert: false,                                                                                         // 475\n            userId: userId,                                                                                          // 476\n            isFromTrustedCode: false,                                                                                // 477\n            docId: doc && doc._id,                                                                                   // 478\n            isLocalCollection: isLocalCollection                                                                     // 479\n          }                                                                                                          // 480\n        });                                                                                                          // 481\n                                                                                                                     // 482\n        return false;                                                                                                // 483\n      },                                                                                                             // 484\n      fetch: ['_id'],                                                                                                // 485\n      transform: null                                                                                                // 486\n    });                                                                                                              // 487\n                                                                                                                     // 488\n    // Second define deny functions to validate again on the server                                                  // 489\n    // for client-initiated inserts and updates. These should be                                                     // 490\n    // called after the clean/autovalue functions since we're adding                                                 // 491\n    // them after. These must *not* have \"transform: null\" if options.transform is true because                      // 492\n    // we need to pass the doc through any transforms to be sure                                                     // 493\n    // that custom types are properly recognized for type validation.                                                // 494\n    c.deny(_.extend({                                                                                                // 495\n      insert: function(userId, doc) {                                                                                // 496\n        // We pass the false options because we will have done them on client if desired                             // 497\n        doValidate.call(                                                                                             // 498\n          c,                                                                                                         // 499\n          \"insert\",                                                                                                  // 500\n          [                                                                                                          // 501\n            doc,                                                                                                     // 502\n            {                                                                                                        // 503\n              trimStrings: false,                                                                                    // 504\n              removeEmptyStrings: false,                                                                             // 505\n              filter: false,                                                                                         // 506\n              autoConvert: false                                                                                     // 507\n            },                                                                                                       // 508\n            function(error) {                                                                                        // 509\n              if (error) {                                                                                           // 510\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));                          // 511\n              }                                                                                                      // 512\n            }                                                                                                        // 513\n          ],                                                                                                         // 514\n          false, // getAutoValues                                                                                    // 515\n          userId,                                                                                                    // 516\n          false // isFromTrustedCode                                                                                 // 517\n        );                                                                                                           // 518\n                                                                                                                     // 519\n        return false;                                                                                                // 520\n      },                                                                                                             // 521\n      update: function(userId, doc, fields, modifier) {                                                              // 522\n        // NOTE: This will never be an upsert because client-side upserts                                            // 523\n        // are not allowed once you define allow/deny functions.                                                     // 524\n        // We pass the false options because we will have done them on client if desired                             // 525\n        doValidate.call(                                                                                             // 526\n          c,                                                                                                         // 527\n          \"update\",                                                                                                  // 528\n          [                                                                                                          // 529\n            {_id: doc && doc._id},                                                                                   // 530\n            modifier,                                                                                                // 531\n            {                                                                                                        // 532\n              trimStrings: false,                                                                                    // 533\n              removeEmptyStrings: false,                                                                             // 534\n              filter: false,                                                                                         // 535\n              autoConvert: false                                                                                     // 536\n            },                                                                                                       // 537\n            function(error) {                                                                                        // 538\n              if (error) {                                                                                           // 539\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));                          // 540\n              }                                                                                                      // 541\n            }                                                                                                        // 542\n          ],                                                                                                         // 543\n          false, // getAutoValues                                                                                    // 544\n          userId,                                                                                                    // 545\n          false // isFromTrustedCode                                                                                 // 546\n        );                                                                                                           // 547\n                                                                                                                     // 548\n        return false;                                                                                                // 549\n      },                                                                                                             // 550\n      fetch: ['_id']                                                                                                 // 551\n    }, options.transform === true ? {} : {transform: null}));                                                        // 552\n                                                                                                                     // 553\n    // note that we've already done this collection so that we don't do it again                                     // 554\n    // if attachSchema is called again                                                                               // 555\n    alreadyDefined[c._name] = true;                                                                                  // 556\n  }                                                                                                                  // 557\n}                                                                                                                    // 558\n                                                                                                                     // 559\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['aldeed:collection2-core'] = {\n  Collection2: Collection2\n};\n\n})();\n","servePath":"/packages/aldeed_collection2-core.js","sourceMap":{"version":3,"sources":["/packages/aldeed_collection2-core/lib/collection2.js"],"names":[],"mappingsfile":"/packages/aldeed_collection2-core.js","sourcesContent":["// Exported only for listening to events\nCollection2 = new EventEmitter();\n\n// backwards compatibility\nif (typeof Mongo === \"undefined\") {\n  Mongo = {};\n  Mongo.Collection = Meteor.Collection;\n}\n\n/**\n * Mongo.Collection.prototype.attachSchema\n * @param {SimpleSchema|Object} ss - SimpleSchema instance or a schema definition object\n *    from which to create a new SimpleSchema instance\n * @param {Object} [options]\n * @param {Boolean} [options.transform=false] Set to `true` if your document must be passed\n *    through the collection's transform to properly validate.\n * @param {Boolean} [options.replace=false] Set to `true` to replace any existing schema instead of combining\n * @return {undefined}\n *\n * Use this method to attach a schema to a collection created by another package,\n * such as Meteor.users. It is most likely unsafe to call this method more than\n * once for a single collection, or to call this for a collection that had a\n * schema object passed to its constructor.\n */\nMongo.Collection.prototype.attachSchema = function c2AttachSchema(ss, options) {\n  var self = this;\n  options = options || {};\n\n  // Allow passing just the schema object\n  if (!(ss instanceof SimpleSchema)) {\n    ss = new SimpleSchema(ss);\n  }\n\n  self._c2 = self._c2 || {};\n\n  // If we've already attached one schema, we combine both into a new schema unless options.replace is `true`\n  if (self._c2._simpleSchema && options.replace !== true) {\n    ss = new SimpleSchema([self._c2._simpleSchema, ss]);\n  }\n\n  // Track the schema in the collection\n  self._c2._simpleSchema = ss;\n\n  // Attach the schema to the underlying LocalCollection, too\n  if (self._collection instanceof LocalCollection) {\n    self._collection._c2 = self._collection._c2 || {};\n    self._collection._c2._simpleSchema = ss;\n  }\n\n  defineDeny(self, options);\n  keepInsecure(self);\n\n  Collection2.emit('schema.attached', self, ss, options);\n};\n\n_.each([Mongo.Collection, LocalCollection], function (obj) {\n  obj.prototype.simpleSchema = function () {\n    var self = this;\n    return self._c2 ? self._c2._simpleSchema : null;\n  };\n});\n\n// Wrap DB write operation methods\n_.each(['insert', 'update'], function(methodName) {\n  var _super = Mongo.Collection.prototype[methodName];\n  Mongo.Collection.prototype[methodName] = function() {\n    var self = this, options,\n        args = _.toArray(arguments);\n\n    options = (methodName === \"insert\") ? args[1] : args[2];\n\n    // Support missing options arg\n    if (!options || typeof options === \"function\") {\n      options = {};\n    }\n\n    if (self._c2 && options.bypassCollection2 !== true) {\n      var userId = null;\n      try { // https://github.com/aldeed/meteor-collection2/issues/175\n        userId = Meteor.userId();\n      } catch (err) {}\n\n      args = doValidate.call(\n        self,\n        methodName,\n        args,\n        true, // getAutoValues\n        userId,\n        Meteor.isServer // isFromTrustedCode\n      );\n      if (!args) {\n        // doValidate already called the callback or threw the error so we're done.\n        // But insert should always return an ID to match core behavior.\n        return methodName === \"insert\" ? self._makeNewID() : undefined;\n      }\n    } else {\n      // We still need to adjust args because insert does not take options\n      if (methodName === \"insert\" && typeof args[1] !== 'function') args.splice(1, 1);\n    }\n\n    return _super.apply(self, args);\n  };\n});\n\n/*\n * Private\n */\n\nfunction doValidate(type, args, getAutoValues, userId, isFromTrustedCode) {\n  var self = this, doc, callback, error, options, isUpsert, selector, last, hasCallback;\n\n  var schema = self.simpleSchema();\n  var isLocalCollection = (self._connection === null);\n\n  if (!args.length) {\n    throw new Error(type + \" requires an argument\");\n  }\n\n  // Gather arguments and cache the selector\n  if (type === \"insert\") {\n    doc = args[0];\n    options = args[1];\n    callback = args[2];\n\n    // The real insert doesn't take options\n    if (typeof options === \"function\") {\n      args = [doc, options];\n    } else if (typeof callback === \"function\") {\n      args = [doc, callback];\n    } else {\n      args = [doc];\n    }\n  } else if (type === \"update\") {\n    selector = args[0];\n    doc = args[1];\n    options = args[2];\n    callback = args[3];\n  } else {\n    throw new Error(\"invalid type argument\");\n  }\n\n  var validatedObjectWasInitiallyEmpty = _.isEmpty(doc);\n\n  // Support missing options arg\n  if (!callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n\n  last = args.length - 1;\n\n  hasCallback = (typeof args[last] === 'function');\n\n  // If update was called with upsert:true, flag as an upsert\n  isUpsert = (type === \"update\" && options.upsert === true);\n\n  // On the server and for local collections, we allow passing `getAutoValues: false` to disable autoValue functions\n  if ((Meteor.isServer || isLocalCollection) && options.getAutoValues === false) {\n    getAutoValues = false;\n  }\n\n  // Determine validation context\n  var validationContext = options.validationContext;\n  if (validationContext) {\n    if (typeof validationContext === 'string') {\n      validationContext = schema.namedContext(validationContext);\n    }\n  } else {\n    validationContext = schema.namedContext();\n  }\n\n  // Add a default callback function if we're on the client and no callback was given\n  if (Meteor.isClient && !callback) {\n    // Client can't block, so it can't report errors by exception,\n    // only by callback. If they forget the callback, give them a\n    // default one that logs the error, so they aren't totally\n    // baffled if their writes don't work because their database is\n    // down.\n    callback = function(err) {\n      if (err) {\n        Meteor._debug(type + \" failed: \" + (err.reason || err.stack));\n      }\n    };\n  }\n\n  // If client validation is fine or is skipped but then something\n  // is found to be invalid on the server, we get that error back\n  // as a special Meteor.Error that we need to parse.\n  if (Meteor.isClient && hasCallback) {\n    callback = args[last] = wrapCallbackForParsingServerErrors(validationContext, callback);\n  }\n\n  var schemaAllowsId = schema.allowsKey(\"_id\");\n  if (type === \"insert\" && !doc._id && schemaAllowsId) {\n    doc._id = self._makeNewID();\n  }\n\n  // Get the docId for passing in the autoValue/custom context\n  var docId;\n  if (type === 'insert') {\n    docId = doc._id; // might be undefined\n  } else if (type === \"update\" && selector) {\n    docId = typeof selector === 'string' || selector instanceof Mongo.ObjectID ? selector : selector._id;\n  }\n\n  // If _id has already been added, remove it temporarily if it's\n  // not explicitly defined in the schema.\n  var cachedId;\n  if (doc._id && !schemaAllowsId) {\n    cachedId = doc._id;\n    delete doc._id;\n  }\n\n  function doClean(docToClean, getAutoValues, filter, autoConvert, removeEmptyStrings, trimStrings) {\n    // Clean the doc/modifier in place\n    schema.clean(docToClean, {\n      filter: filter,\n      autoConvert: autoConvert,\n      getAutoValues: getAutoValues,\n      isModifier: (type !== \"insert\"),\n      removeEmptyStrings: removeEmptyStrings,\n      trimStrings: trimStrings,\n      extendAutoValueContext: _.extend({\n        isInsert: (type === \"insert\"),\n        isUpdate: (type === \"update\" && options.upsert !== true),\n        isUpsert: isUpsert,\n        userId: userId,\n        isFromTrustedCode: isFromTrustedCode,\n        docId: docId,\n        isLocalCollection: isLocalCollection\n      }, options.extendAutoValueContext || {})\n    });\n  }\n\n  // Preliminary cleaning on both client and server. On the server and for local\n  // collections, automatic values will also be set at this point.\n  doClean(\n    doc,\n    getAutoValues,\n    options.filter !== false,\n    options.autoConvert !== false,\n    options.removeEmptyStrings !== false,\n    options.trimStrings !== false\n  );\n\n  // We clone before validating because in some cases we need to adjust the\n  // object a bit before validating it. If we adjusted `doc` itself, our\n  // changes would persist into the database.\n  var docToValidate = {};\n  for (var prop in doc) {\n    // We omit prototype properties when cloning because they will not be valid\n    // and mongo omits them when saving to the database anyway.\n    if (doc.hasOwnProperty(prop)) {\n      docToValidate[prop] = doc[prop];\n    }\n  }\n\n  // On the server, upserts are possible; SimpleSchema handles upserts pretty\n  // well by default, but it will not know about the fields in the selector,\n  // which are also stored in the database if an insert is performed. So we\n  // will allow these fields to be considered for validation by adding them\n  // to the $set in the modifier. This is no doubt prone to errors, but there\n  // probably isn't any better way right now.\n  if (Meteor.isServer && isUpsert && _.isObject(selector)) {\n    var set = docToValidate.$set || {};\n    docToValidate.$set = _.clone(selector);\n    if (!schemaAllowsId) delete docToValidate.$set._id;\n    _.extend(docToValidate.$set, set);\n  }\n\n  // Set automatic values for validation on the client.\n  // On the server, we already updated doc with auto values, but on the client,\n  // we will add them to docToValidate for validation purposes only.\n  // This is because we want all actual values generated on the server.\n  if (Meteor.isClient && !isLocalCollection) {\n    doClean(docToValidate, true, false, false, false, false);\n  }\n\n  // XXX Maybe move this into SimpleSchema\n  if (!validatedObjectWasInitiallyEmpty && _.isEmpty(docToValidate)) {\n    throw new Error('After filtering out keys not in the schema, your ' +\n      (type === 'update' ? 'modifier' : 'object') +\n      ' is now empty');\n  }\n\n  // Validate doc\n  var isValid;\n  if (options.validate === false) {\n    isValid = true;\n  } else {\n    isValid = validationContext.validate(docToValidate, {\n      modifier: (type === \"update\" || type === \"upsert\"),\n      upsert: isUpsert,\n      extendedCustomContext: _.extend({\n        isInsert: (type === \"insert\"),\n        isUpdate: (type === \"update\" && options.upsert !== true),\n        isUpsert: isUpsert,\n        userId: userId,\n        isFromTrustedCode: isFromTrustedCode,\n        docId: docId,\n        isLocalCollection: isLocalCollection\n      }, options.extendedCustomContext || {})\n    });\n  }\n\n  if (isValid) {\n    // Add the ID back\n    if (cachedId) {\n      doc._id = cachedId;\n    }\n\n    // Update the args to reflect the cleaned doc\n    // XXX not sure this is necessary since we mutate\n    if (type === \"insert\") {\n      args[0] = doc;\n    } else {\n      args[1] = doc;\n    }\n\n    // If callback, set invalidKey when we get a mongo unique error\n    if (Meteor.isServer && hasCallback) {\n      args[last] = wrapCallbackForParsingMongoValidationErrors(validationContext, args[last]);\n    }\n\n    return args;\n  } else {\n    error = getErrorObject(validationContext);\n    if (callback) {\n      // insert/update/upsert pass `false` when there's an error, so we do that\n      callback(error, false);\n    } else {\n      throw error;\n    }\n  }\n}\n\nfunction getErrorObject(context) {\n  var message, invalidKeys = context.invalidKeys();\n  if (invalidKeys.length) {\n    message = context.keyErrorMessage(invalidKeys[0].name);\n  } else {\n    message = \"Failed validation\";\n  }\n  var error = new Error(message);\n  error.invalidKeys = invalidKeys;\n  error.validationContext = context;\n  // If on the server, we add a sanitized error, too, in case we're\n  // called from a method.\n  if (Meteor.isServer) {\n    error.sanitizedError = new Meteor.Error(400, message, EJSON.stringify(error.invalidKeys));\n  }\n  return error;\n}\n\nfunction addUniqueError(context, errorMessage) {\n  var name = errorMessage.split('c2_')[1].split(' ')[0];\n  var val = errorMessage.split('dup key:')[1].split('\"')[1];\n  context.addInvalidKeys([{\n    name: name,\n    type: 'notUnique',\n    value: val\n  }]);\n}\n\nfunction wrapCallbackForParsingMongoValidationErrors(validationContext, cb) {\n  return function wrappedCallbackForParsingMongoValidationErrors(error) {\n    var args = _.toArray(arguments);\n    if (error &&\n        ((error.name === \"MongoError\" && error.code === 11001) || error.message.indexOf('MongoError: E11000' !== -1)) &&\n        error.message.indexOf('c2_') !== -1) {\n      addUniqueError(validationContext, error.message);\n      args[0] = getErrorObject(validationContext);\n    }\n    return cb.apply(this, args);\n  };\n}\n\nfunction wrapCallbackForParsingServerErrors(validationContext, cb) {\n  return function wrappedCallbackForParsingServerErrors(error) {\n    var args = _.toArray(arguments);\n    // Handle our own validation errors\n    if (error instanceof Meteor.Error &&\n        error.error === 400 &&\n        error.reason === \"INVALID\" &&\n        typeof error.details === \"string\") {\n      var invalidKeysFromServer = EJSON.parse(error.details);\n      validationContext.addInvalidKeys(invalidKeysFromServer);\n      args[0] = getErrorObject(validationContext);\n    }\n    // Handle Mongo unique index errors, which are forwarded to the client as 409 errors\n    else if (error instanceof Meteor.Error &&\n             error.error === 409 &&\n             error.reason &&\n             error.reason.indexOf('E11000') !== -1 &&\n             error.reason.indexOf('c2_') !== -1) {\n      addUniqueError(validationContext, error.reason);\n      args[0] = getErrorObject(validationContext);\n    }\n    return cb.apply(this, args);\n  };\n}\n\nvar alreadyInsecured = {};\nfunction keepInsecure(c) {\n  // If insecure package is in use, we need to add allow rules that return\n  // true. Otherwise, it would seemingly turn off insecure mode.\n  if (Package && Package.insecure && !alreadyInsecured[c._name]) {\n    c.allow({\n      insert: function() {\n        return true;\n      },\n      update: function() {\n        return true;\n      },\n      remove: function () {\n        return true;\n      },\n      fetch: [],\n      transform: null\n    });\n    alreadyInsecured[c._name] = true;\n  }\n  // If insecure package is NOT in use, then adding the two deny functions\n  // does not have any effect on the main app's security paradigm. The\n  // user will still be required to add at least one allow function of her\n  // own for each operation for this collection. And the user may still add\n  // additional deny functions, but does not have to.\n}\n\nvar alreadyDefined = {};\nfunction defineDeny(c, options) {\n  if (!alreadyDefined[c._name]) {\n\n    var isLocalCollection = (c._connection === null);\n\n    // First define deny functions to extend doc with the results of clean\n    // and autovalues. This must be done with \"transform: null\" or we would be\n    // extending a clone of doc and therefore have no effect.\n    c.deny({\n      insert: function(userId, doc) {\n        // Referenced doc is cleaned in place\n        c.simpleSchema().clean(doc, {\n          isModifier: false,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: true,\n            isUpdate: false,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n\n        return false;\n      },\n      update: function(userId, doc, fields, modifier) {\n        // Referenced modifier is cleaned in place\n        c.simpleSchema().clean(modifier, {\n          isModifier: true,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: false,\n            isUpdate: true,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc && doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n\n        return false;\n      },\n      fetch: ['_id'],\n      transform: null\n    });\n\n    // Second define deny functions to validate again on the server\n    // for client-initiated inserts and updates. These should be\n    // called after the clean/autovalue functions since we're adding\n    // them after. These must *not* have \"transform: null\" if options.transform is true because\n    // we need to pass the doc through any transforms to be sure\n    // that custom types are properly recognized for type validation.\n    c.deny(_.extend({\n      insert: function(userId, doc) {\n        // We pass the false options because we will have done them on client if desired\n        doValidate.call(\n          c,\n          \"insert\",\n          [\n            doc,\n            {\n              trimStrings: false,\n              removeEmptyStrings: false,\n              filter: false,\n              autoConvert: false\n            },\n            function(error) {\n              if (error) {\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n              }\n            }\n          ],\n          false, // getAutoValues\n          userId,\n          false // isFromTrustedCode\n        );\n\n        return false;\n      },\n      update: function(userId, doc, fields, modifier) {\n        // NOTE: This will never be an upsert because client-side upserts\n        // are not allowed once you define allow/deny functions.\n        // We pass the false options because we will have done them on client if desired\n        doValidate.call(\n          c,\n          \"update\",\n          [\n            {_id: doc && doc._id},\n            modifier,\n            {\n              trimStrings: false,\n              removeEmptyStrings: false,\n              filter: false,\n              autoConvert: false\n            },\n            function(error) {\n              if (error) {\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n              }\n            }\n          ],\n          false, // getAutoValues\n          userId,\n          false // isFromTrustedCode\n        );\n\n        return false;\n      },\n      fetch: ['_id']\n    }, options.transform === true ? {} : {transform: null}));\n\n    // note that we've already done this collection so that we don't do it again\n    // if attachSchema is called again\n    alreadyDefined[c._name] = true;\n  }\n}\n"]}}]