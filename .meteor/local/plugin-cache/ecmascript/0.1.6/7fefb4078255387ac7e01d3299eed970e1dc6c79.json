{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"var resetPassword = function (options) {\n  _validate(options.form, options.template);\n};\n\nvar _validate = function (form, template) {\n  $(form).validate(validation(template));\n};\n\nvar validation = function (template) {\n  return {\n    rules: {\n      newPassword: {\n        required: true,\n        minlength: 6\n      },\n      repeatNewPassword: {\n        required: true,\n        minlength: 6,\n        equalTo: '[name=\"newPassword\"]'\n      }\n    },\n    messages: {\n      newPassword: {\n        required: \"Enter a new password, please.\",\n        minlength: \"Use at least six characters, please.\"\n      },\n      repeatNewPassword: {\n        required: \"Repeat your new password, please.\",\n        equalTo: \"Hmm, your passwords don't match. Try again?\"\n      }\n    },\n    submitHandler: function () {\n      _handleReset(template);\n    }\n  };\n};\n\nvar _handleReset = function (template) {\n  var token = FlowRouter.current().params.token,\n      password = template.find('[name=\"newPassword\"]').value;\n\n  Accounts.resetPassword(token, password, function (error) {\n    if (error) {\n      Bert.alert(error.reason, 'danger');\n    } else {\n      Bert.alert('Password reset!', 'success');\n    }\n  });\n};\n\nModules.client.resetPassword = resetPassword;","ast":null,"map":{"version":3,"sources":["/client/modules/reset-password.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,GAAG,UAAE,OAAO,EAAM;AACjC,WAAS,CAAE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,QAAQ,CAAE,CAAC;CAC7C,CAAC;;AAEF,IAAI,SAAS,GAAG,UAAE,IAAI,EAAE,QAAQ,EAAM;AACpC,GAAC,CAAE,IAAI,CAAE,CAAC,QAAQ,CAAE,UAAU,CAAE,QAAQ,CAAE,CAAE,CAAC;CAC9C,CAAC;;AAEF,IAAI,UAAU,GAAG,UAAE,QAAQ,EAAM;AAC/B,SAAO;AACL,SAAK,EAAE;AACL,iBAAW,EAAE;AACX,gBAAQ,EAAE,IAAI;AACd,iBAAS,EAAE,CAAC;OACb;AACD,uBAAiB,EAAE;AACjB,gBAAQ,EAAE,IAAI;AACd,iBAAS,EAAE,CAAC;AACZ,eAAO,EAAE,sBAAsB;OAChC;KACF;AACD,YAAQ,EAAE;AACR,iBAAW,EAAE;AACX,gBAAQ,EAAE,+BAA+B;AACzC,iBAAS,EAAE,sCAAsC;OAClD;AACD,uBAAiB,EAAE;AACjB,gBAAQ,EAAE,mCAAmC;AAC7C,eAAO,EAAE,6CAA6C;OACvD;KACF;AACD,iBAAa,EAAA,YAAG;AAAE,kBAAY,CAAE,QAAQ,CAAE,CAAC;KAAE;GAC9C,CAAC;CACH,CAAC;;AAEF,IAAI,YAAY,GAAG,UAAE,QAAQ,EAAM;AACjC,MAAI,KAAK,GAAM,UAAU,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,KAAK;MAC5C,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAE,sBAAsB,CAAE,CAAC,KAAK,CAAC;;AAE7D,UAAQ,CAAC,aAAa,CAAE,KAAK,EAAE,QAAQ,EAAE,UAAE,KAAK,EAAM;AACpD,QAAK,KAAK,EAAG;AACX,UAAI,CAAC,KAAK,CAAE,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAE,CAAC;KACtC,MAAM;AACL,UAAI,CAAC,KAAK,CAAE,iBAAiB,EAAE,SAAS,CAAE,CAAC;KAC5C;GACF,CAAC,CAAC;CACJ,CAAC;;AAEF,OAAO,CAAC,MAAM,CAAC,aAAa,GAAG,aAAa,CAAC","file":"/client/modules/reset-password.js.map","sourcesContent":["let resetPassword = ( options ) => {\n  _validate( options.form, options.template );\n};\n\nlet _validate = ( form, template ) => {\n  $( form ).validate( validation( template ) );\n};\n\nlet validation = ( template ) => {\n  return {\n    rules: {\n      newPassword: {\n        required: true,\n        minlength: 6\n      },\n      repeatNewPassword: {\n        required: true,\n        minlength: 6,\n        equalTo: '[name=\"newPassword\"]'\n      }\n    },\n    messages: {\n      newPassword: {\n        required: \"Enter a new password, please.\",\n        minlength: \"Use at least six characters, please.\"\n      },\n      repeatNewPassword: {\n        required: \"Repeat your new password, please.\",\n        equalTo: \"Hmm, your passwords don't match. Try again?\"\n      }\n    },\n    submitHandler() { _handleReset( template ); }\n  };\n};\n\nlet _handleReset = ( template ) => {\n  var token    = FlowRouter.current().params.token,\n      password = template.find( '[name=\"newPassword\"]' ).value;\n\n  Accounts.resetPassword( token, password, ( error ) => {\n    if ( error ) {\n      Bert.alert( error.reason, 'danger' );\n    } else {\n      Bert.alert( 'Password reset!', 'success' );\n    }\n  });\n};\n\nModules.client.resetPassword = resetPassword;\n"]},"hash":"7fefb4078255387ac7e01d3299eed970e1dc6c79"}
